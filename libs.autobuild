# old_navigation packages

# Add a bundle package and create in it a "scripts" directory
bundle_package 'bundles/old_navigation' do |pkg|
        Autoproj.env_add_path 'RUBYLIB', File.join(pkg.srcdir, "scripts")
end

import_package 'learning/maps'


# Declaration of how the package "learning/libcmaes" should be configured,
# built and installed
import_package "learning/libcmaes" do |pkg|
    # pkg.depends_on should only be used for dynamic dependencies i.e.
    # dependencies that are dependent on build options.  Static dependencies
    # should be defined in the packageâ€™s manifest.xml The manifest has to be in
    # the manifests folder under the same folder structure where the package is
    # lodaded (in this case under learning)
    
    def pkg.prepare
        #Executed on update phase
        super
        
        # These are the commands to run to configure the library for building.
        in_dir("#{srcdir}") do
            # The output will be stored in a file with appendix the first
            # string of the following command. In this case "autogen".
            # The second and posterior parameters define the command to execute 
            # for the configuration
            run("autogen", "./autogen.sh")
            run("configure", "./configure", "--prefix=#{Autobuild.prefix}", 
            "--includedir=#{Autobuild.prefix}/include")
            message "Configured %s"
        end
    end

    def pkg.build
        # These are the commands that to build the library.
        in_dir("#{srcdir}") do
            run("build", Autobuild.tool(:make))
        end
        message "Built %s"
    end

    def pkg.install
        # These are the commands to install the library.
        in_dir("#{srcdir}") do
            run("install", Autobuild.tool(:make), "install")
        end
        message "Installed %s"
    end

end

import_package "learning/nlopt" do |pkg|

    def pkg.prepare
        super

        in_dir("#{srcdir}") do
            run("configure", "./configure", "--prefix=#{Autobuild.prefix}", 
            "--includedir=#{Autobuild.prefix}/include/nlopt", "--with-cxx", 
            "--enable-shared", "--without-python",  "--without-matlab", 
            "--without-octave")
            message "Configured %s"
        end
    end

    def pkg.build
        in_dir("#{srcdir}") do
            run("build", Autobuild.tool(:make))
            message "Built %s"
        end
    end

    def pkg.install
        in_dir("#{srcdir}") do
            run("install", Autobuild.tool(:make), "install")
            message "Installed %s"
        end
    end
end

import_package "learning/sferes2" do |pkg|

    def pkg.prepare
        super

        in_dir("#{srcdir}") do
            run("configure", "./waf", "configure")
            run("rock-configure", "./waf","configure", 
            "--prefix=#{Autobuild.prefix}", "--out=#{Autobuild.prefix}/lib")
            message "Configured %s"
        end
    end

    def pkg.build
        in_dir("#{srcdir}") do
            run("build", "./waf","build")
            in_dir("#{srcdir}/sferes") do
                run("cp-headers", 
                "find . -name '*.h*' | cpio -pdm #{Autobuild.prefix}/include/sferes")
                message "headers copied %s"
            end
            message "Built %s"
        end
    end

    def pkg.install
        in_dir("#{srcdir}") do
            run("install", "./waf", "install")
            message "Installed %s"
        end
    end

end


import_package "learning/limbo" do |pkg|

    def pkg.prepare
        super
        in_dir("#{srcdir}") do
            run("configure", "./waf", "configure")
            run("rock-configure", "./waf","configure", 
            "--prefix=#{Autobuild.prefix}", 
            "--out=#{Autobuild.prefix}/lib/limbo", 
            "--libcmaes=#{Autobuild.prefix}", "--nlopt=#{Autobuild.prefix}", 
            "--sferes=#{Autobuild.prefix}/include")
            message "Configured %s"
        end
    end

    def pkg.build
        in_dir("#{srcdir}") do
            run("build", "./waf","build")
            in_dir("#{srcdir}/src") do
                run("cp-headers", 
                "find . -name '*.h*' | cpio -pdm #{Autobuild.prefix}/include/limbo")
                message "headers copied %s"
            end
            message "Built %s"
        end
    end

    def pkg.install
        in_dir("#{srcdir}") do
            run("install", "./waf", "install")
            message "Installed %s"
        end
    end

end
